1`# -*- coding: utf-8 -*-
"""「Linear Algebra - hw3」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dXJ7y4djgXmBY1qyC44b1bjAKSaD6hCG
"""

import numpy as np
import matplotlib.image as img
import matplotlib.pyplot as plt
import math

# Mount your google drive to save your gif result.
from google.colab import drive
drive.mount('/content/drive')

# For question (4)
# you cannot use x to compute the center and the radius inside this function.
def dataSampling(x):
    point = []
    upper = [50, 50]
    lower = [50, 50]
    left = [50, 50]
    right = [50, 50]
    middle1 = [50,50]
    middle2 = [50,50]
    leng = len(x)
    #print(leng)
    i = 0
    for p in x:
        #print(p[1])
        mid1 = int((left[0]+right[0])/2)
        mid2 = int((lower[1]+upper[1])/2)
        if p[1] > upper[1]:
          upper = [p[0], p[1]]
        if p[1] < lower[1]:
          lower = [p[0], p[1]]
        if p[0] < left[0]:
          left = [p[0], p[1]]
        if p[0] > right[0]:
          right = [p[0], p[1]] 
        if p[0] == mid1  :
          middle1 = [p[0], p[1]]
        if p[1] == mid2 :
          middle2 = [p[0], p[1]]
    point.append(upper)
    point.append(lower)
    point.append(left)
    point.append(right)
    point.append(middle1)
    point.append(middle2)
    return point

def circle(sp) :
    n=len(sp)
    A = np.zeros((n, 3))
    b = np.zeros((n))
    for i in range(n):
        pt = sp[i]
        A[i, :] = [2.*pt[0], 2.*pt[1], 1]
        b[i] = pt[0]*pt[0]+pt[1]*pt[1]
    return A, b

def draw_circle(x, h, w) :
    center = [x[0], x[1]]
    radius = math.sqrt(x[2]+x[0]*x[0]+x[1]*x[1])
    #print(x[0])
    x_axis = np.linspace(0, w, 700)
    y_axis = np.linspace(0, h, 700)

    a, b = np.meshgrid(x_axis, y_axis)

    C = (a - x[0])*(a - x[0]) + (b - x[1])*(b - x[1]) - radius*radius
    return a, b, C

def eclipse(sp) :
    n=len(sp)
    # TODO: How many variable should use?
    A = np.zeros((n, 5))
    b = np.ones((n))
    for i in range(n):
        pt = sp[i]
        x = pt[0]
        y = pt[1]
        # TODO: eclipse formula here.
        A[i, :] = [x*x, x*y, y*y, x, y]
        b[i] = 1
    return A, b
    

def draw_eclipse(x, h, w) :
    # plot the drawing and the fitted circle
    x_axis = np.linspace(0, w, 700)
    y_axis = np.linspace(0, h, 700)
    a, b = np.meshgrid(x_axis, y_axis)

    # TODO: eclipse formula here.
    C = x[0]*a*a + x[1]*a*b + x[2]*b*b + x[3]*a + x[4]*b - 1 


    return a, b, C

"""# DO NOT MODIFY THE JUDGE CODE!!!"""

def judge_overlapping(points) :
    # calculate all sample point circle.
    A, b = circle(points)
    sol1 = np.linalg.lstsq(A, b, rcond=None)[0]
    x1 = sol1[0]
    y1 = sol1[1]
    r1 = math.sqrt(sol1[2]+x1**2+y1**2)

    sp = dataSampling(points)
    A, b = circle(sp)
    sol2 = np.linalg.lstsq(A, b, rcond=None)[0]
    x2 = sol2[0]
    y2 = sol2[1]
    #print(sol2[2]);
    r2 = math.sqrt(sol2[2]+x2**2+y2**2)

    d = math.sqrt((x1-x2)**2 + (y1-y2)**2)

    if r1+r2 <= d :
        # 1 point or no point
        return 0
    elif min(r1, r2) + d <= max(r1, r2) :
        # inner circle
        return (min(r1, r2)**2) / (max(r1, r2)**2)
   
    alpha = math.acos((r1**2 + d**2 - r2**2) / (2 * r1 * d))
    beta = math.acos((r2**2 + d**2 - r1**2) / (2 * r2 * d))

    overlapping = alpha * (r1**2) + beta * (r2**2) - (r1**2) * math.cos(alpha) * math.sin(alpha) - (r2**2) * math.cos(beta) * math.sin(beta)

    return overlapping / (max(r1**2, r2**2) * np.pi)

def judge_sampling(points) :
    all_point = len(points)
    sp = dataSampling(points)
    sp_len = 0
    for p in sp :
        for ss in points :
            if ss[0] == p[0] and ss[1] == p[1] :
                sp_len += 1

    return (all_point - sp_len) / all_point


def judge(points) :
    overlap = judge_overlapping(points)
    sample = judge_sampling(points)

    print("The score of this question is : ")
    print("20 * (0.3 * ? (Efficiency, need your report) + 0.3 * {:f} (correctness) + 0.4 * {:f} (sampling) ) =  ? + {:f}".format(overlap, sample, 20 * (0.3 * overlap + 0.4 * sample)))

def main(file, mode="circle") :
    # read image and get circle points
    #im1 = img.imread('puddle.png')
    im1 = img.imread(file)
    [h, w, c] = np.array(im1).shape
    points = [];
    for i in range(h):
        for j in range(w):
            if (all(im1[i,j,:])==0):
                points.append([i, j])
                


    # sampling data
    sp = dataSampling(points)

    if mode == "circle":
        # create matrix for fitting
        A, b = circle(sp)

        # solve the least square problem
        [x, r, rank] = np.linalg.lstsq(A, b, rcond=None)[0:3] 
        #print("rank: ", rank)
        #print("r: ", r)
        a, b, C = draw_circle(x, h, w)
    elif mode == "eclipse":
        # create matrix for fitting
        A, b = eclipse(sp)

        # solve the least square problem
        [x, r, rank] = np.linalg.lstsq(A, b, rcond=None)[0:3]
        #print("rank2: ", rank)
        #print("r2: ", r)
        a, b, C = draw_eclipse(x, h, w)
    #implement the normal equation
    elif mode == "circle2":
      # create matrix for fitting
        A, b = circle(sp)

        # solve the least square problem
        # [x, r, rank] = np.linalg.lstsq(A, b, rcond=None)[0:3]
        A_transpose = np.transpose(A);
        At_mul_A = np.dot(A_transpose, A);
        inverse_matrix = np.linalg.inv(At_mul_A);
        # x = (AtA)^(-1)Atb
        x = np.dot(inverse_matrix, A_transpose);
        x = np.dot(x, b);
        a, b, C = draw_circle(x, h, w)
    figure, axes = plt.subplots(1)
    plt.imshow(im1) 
    axes.contour(b, a, C, [0])
    axes.set_aspect(1)
    plt.savefig(file+'.output.png')
    plt.show()
    judge(points)
    print("="*50)

files = ['case1.png', 'case2.png', 'case3.png']
#for f in files :
#    main('/content/drive/My Drive/' + f, mode="circle")
#    main('/content/drive/My Drive/' + f, mode="eclipse")
main('/content/drive/My Drive/case1.png', mode="circle")
main('/content/drive/My Drive/case1.png', mode="circle2")
main('/content/drive/My Drive/case1.png', mode="eclipse")
