# -*- coding: utf-8 -*-
"""「Linear Algebra - hw1」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtHK5SGrDF6YQQUilD_Dis3pmqkz4Dj7
"""

import numpy as np

def SolveLP(A, b, G):
    '''Solve the linear programming problem
        Max G(x)
        st. Ax <= b
             x >= 0
    '''
    # step 0: initialization
    maxg = 0;
    
    # step 1a: enumuate all combinations
    [m, n] = A.shape
    lst = EnumerateAll(np.arange(m), m, n)
      #np.arange(m)-->1d array with m indexes
    # step 1b: compute all the intersection points
    points = [];
    for idx in lst:
        Ai = A[idx, :]
        bi = b[idx]
        feasible = 1

        try: 
            xi = np.linalg.solve(Ai, bi)
        except np.linalg.LinAlgError:
            # Ai is singular or not square.
            feasible = 0

        
        # step 2: check the feasibility of the itersection point
        if feasible == 1:
          for i in range(m):
              if np.dot(A[i,:], xi) > b[i]:  # violate a constraints
                  feasible = 0
        if feasible == 1:            # only add the feasible point
            points.append(xi)
        
    # step 3: evaluate the G function for all intersection points
    values = []
    for ptx in points:
        values.append(np.dot(G[0:n], ptx)+G[-1])
    
    # step 4: find the point with the largest value as the result
    maxg = max(values)
    maxidx = values.index(maxg)
    x = points[maxidx]
    
    return x, maxg

def EnumerateAll(mlist, m, n):
    ''' Enumerate all the n-tuple from mlist.
        where mlist contains m numbers.
        We assume m >= n.
    ''' 

    # this is just for demo purpose.
    # write your own code for question (3) here.
    return [[0,1,2,3], [1,2,3,4], [0,2,3,4], [0,1,3,4], [0,1,2,4]];



#-------------------------------#
# main program starts from here.#
#-------------------------------#
# Put all the coefficients of the constrains into a matrix A and a vector b

A = np.array([[1,1,1,1],[2,5,0,2],[4,13,0,0], [2,8,6,1], [1,6,1,0], [0, -1, 0, 0], [-1,0,0,0], [0,0,-1,0],[0,0,0,-1]]) # x >= 0 === -x <= 0 (Don't forgot the non-negative constraint!)
             #[x,y]
b = np.array([15, 20, 15, 55, 10, 0, 0, 0, 0])
             #constant
G = np.array([9, 33, 7, 3, 0]) #maxg(x,y) = 12x + 15y + 10

# solve this problem
[x, maxg] = SolveLP(A, b, G)
print(x)
print(maxg)