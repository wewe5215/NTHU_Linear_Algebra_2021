# -*- coding: utf-8 -*-
"""「Linear Algebra - hw2」-2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rIG3UBJ1BmpPFfaCcSSTl70KmlDTXq1k
"""

from platform import python_version

print(python_version())

# install imagemagick in order to save gif file.
!apt install imagemagick

# Mount your google drive to save your gif result.
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# draw result on colab.
# %matplotlib inline

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.axes3d import Axes3D
import numpy as np
import math
from matplotlib.animation import FuncAnimation, PillowWriter 



def set_object(R, T):
    # drawing
    for oo, mat in zip(objs, data):
        n = len(mat[0])
        # rotation 
        mat = np.dot(R, mat) + np.dot(T, np.ones((1,n)))
        # set the object    
        oo.set_data(mat[0], mat[1])
        oo.set_3d_properties(mat[2])
    return objs

def roll(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[1,             0,             0],
                  [0, math.cos(phi), -math.sin(phi)], 
                  [0, math.sin(phi), math.cos(phi)]]);
    
    m = len(data)
    T = np.zeros((m,1))     # no translation
    return set_object(R, T)

def yaw(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi),  math.cos(phi), 0], 
                  [0,              0,             1]]);
    
    m = len(data)
    T = np.zeros((m,1))     # no translation
    return set_object(R, T)

def pitch(i):
    phi = 2*i*math.pi/N
    # define the rotation matrix
    R = np.array([[ math.cos(phi), 0, -math.sin(phi)], 
                  [0,              1,             0],
                  [math.sin(phi), 0, math.cos(phi)]]);
    
    m = len(data)
    T = np.zeros((m,1))     # no translation
    ax.text(10, 10, 10, str(phi))
    return set_object(R, T)


def myMovie_basic(i):
    T = np.array([[xdata[i]], [ydata[i]], [zdata[i]]])
    R = np.eye(3) #3-dimension identity matrix
    return set_object(R, T)


def myMovie(i):
    T = np.array([[xdata[i]], [ydata[i]], [zdata[i]]])
    phi = -2*math.pi*i/N
    
    # roll
    # slip a circle into N equal angles
    
    R = np.array([[ math.cos(phi), -math.sin(phi), 0], 
                  [math.sin(phi), math.cos(phi), 0], 
                  [0,              0,             1]])

# add pitch
    theta = math.pi/2
    R = np.dot(R, np.array([[ math.cos(theta), 0, -math.sin(theta)], 
                            [0,              1,             0],
                            [math.sin(theta), 0, math.cos(theta)]]))
    # add yaw
    R = np.dot(R, np.array([[1,              0,             0],
                            [0, math.cos(-phi), -math.sin(-phi)], 
                            [0, math.sin(-phi),  math.cos(-phi)]]))
    
    
    
    return set_object(R, T)


# -------------- main program starts here ----------------#
N = 100
fig = plt.gcf()
ax = Axes3D(fig, xlim=(-20, 20), ylim=(-20, 20), zlim=(-20, 20))


# data matrix
M1 = np.array([[-6.5, -6.5, -4.5, -4.5, -6.5], 
         [4.5, -4.5, -4.5, 4.5, 4.5], 
         [0, 0, 0, 0, 0,]])
M2 = np.array([[-2.5, -2.5, -1.5, -1.5, -2.5], 
        [1, -1, 1, -1, 1], 
        [0, 0, 0, 0, 0]])
M3 = np.array([[-4.5, -4.5, -0.5, -0.5, -4.5], 
        [2, -2, -2, 2, 2],
        [0, 0, 0, 0, 0]])
M4 = np.array([[6, -6.5, -6.5, 6, 6], 
        [4.5, 4.5, 4.5, 4.5, 4.5],
        [6.5, 6.5, -2.5, -2.5, 6.5]])
data = [M1, M2, M3, M4]

# create 3D objects list
O1, = ax.plot3D(M1[0], M1[1], M1[2])
O2, = ax.plot3D(M2[0], M2[1], M2[2])
O3, = ax.plot3D(M3[0], M3[1], M3[2])
o4, = ax.plot3D(M4[0], M4[1], M4[2])
objs = [O1, O2, O3, o4]

# trajectory data
t = np.arange(-1,1,0.01)
#[0. 0.01 0.02 0.03 ...... 0.99]
r = 15
ydata = r*np.sin(-4*math.pi*t)
xdata = r*np.cos(2*math.pi*t)
zdata = r*np.cos(-6*math.pi*t)
# basic rotations
#ani = FuncAnimation(fig, roll, frames=N, interval=10)
#ani = FuncAnimation(fig, yaw, frames=N, interval=10)
#ani = FuncAnimation(fig, pitch, frames=N, interval=1000)
#interval means the interval time between two different actions
ani = FuncAnimation(fig, myMovie, frames=len(xdata), interval=100)
#print(len(xdata))
#ani.save('/content/drive/My Drive/your_file_name', writer='imagemagick', fps=30)
ani.save('/content/drive/My Drive/A2.gif', writer='imagemagick', fps=30)

# ---------------- for google colab user ----------------#
# If you didn't use colab, you can delete below 2 lines of code.
from IPython.display import HTML
HTML(ani.to_html5_video())
# ---------------- for google colab user ----------------#